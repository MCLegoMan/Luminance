plugins {
	id "fabric-loom" version "1.7-SNAPSHOT"
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id "com.modrinth.minotaur" version "2.+"
	id "maven-publish"
}
group = project.maven_group
version = String.valueOf(project.mod_version + (project.isDirty == "true" ? "+dirty." + System.currentTimeSeconds() : "")) + "+" + project.mc_version

base {
	archivesName = project.archive_name
}
loom {
	mods {
		"luminance" {
			sourceSet("main")
		}
	}
}
runClient.doFirst {
	args += ["--username", "Luminance${new Random().nextInt(1000)}"]
}
repositories {
	maven { url "https://jitpack.io" }
	maven { url "https://maven.mclegoman.com/releases/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	mavenCentral()
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft}"
	mappings "net.fabricmc:yarn:${project.mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api}"

	// Compatibility
	//modImplementation "maven.modrinth:sodium:${project.sodium}"
	//modImplementation "maven.modrinth:iris:${project.iris}"
	//modImplementation "com.terraformersmc:modmenu:${project.modmenu}"
	modImplementation fileTree(dir: 'libs', include: '*.jar')

	// Development Environment Only
	modImplementation "com.ptsmods:devlogin:3.4.1"
}
processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}
tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}
java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}
jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName}"}
	}
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}
if (rootProject.file(".env").exists()) {
	githubRelease {
		token rootProject.file(".env").text.readLines().get(1).replace("GITHUB=", "").replace("\"", "")
		owner "MCLegoMan"
		repo "${project.mod_name}"
		tagName "${project.mod_version}-${project.mc_version.replace("/", "-")}"
		targetCommitish "${(project.version_type == "release" ? "release" : "development")}-${project.mc_version.replace("/", "-")}"
		releaseName "[${project.mc_version}] ${project.mod_name} ${project.mod_version}"
		generateReleaseNotes false
		body String.valueOf(((project.version_type == "release") ? rootProject.file("changelog/header_release.md").text : rootProject.file("changelog/header_development.md").text) + "\n## ${project.mod_name} ${project.mod_version} for ${project.mc_version}\n\n" + rootProject.file("changelog/body.md").text + "\n\n" + ((project.version_type == "release") ? rootProject.file("changelog/footer_release.md").text : rootProject.file("changelog/footer_development.md").text))
		draft false
		if (project.version_type == "release") prerelease false
		else prerelease true
		releaseAssets tasks.remapJar
		allowUploadToExisting.set false
		overwrite false
		dryRun false
		apiEndpoint "https://api.github.com"
		client
	}
	modrinth {
		token = rootProject.file(".env").text.readLines().get(0).replace("MODRINTH=", "").replace("\"", "")
		projectId = "${project.modrinth_id}"
		versionName = "[${project.mc_version}] ${project.mod_name} ${project.mod_version}"
		versionNumber = "${project.mod_version}${project.mc_version}"
		versionType = "${project.version_type}"
		uploadFile = tasks.remapJar
		gameVersions = List.of(project.mc_versions.split(", "))
		loaders = ["fabric", "quilt"]
		changelog = String.valueOf(((project.version_type == "release") ? rootProject.file("changelog/header_release.md").text : rootProject.file("changelog/header_development.md").text) + "\n## ${project.mod_name} ${project.mod_version} for ${project.mc_version}\n\n" + rootProject.file("changelog/body.md").text + "\n\n" + ((project.version_type == "release") ? rootProject.file("changelog/footer_release.md").text : rootProject.file("changelog/footer_development.md").text))
		dependencies {
			required.project "fabric-api"
			required.project "qsl"
		}
	}
	tasks.register("uploadVersion") {
		group = project.archive_name
		description = "Upload project to both GitHub and Modrinth."
		dependsOn(tasks.githubRelease)
		dependsOn(tasks.modrinth)
	}
}
tasks.register("quickPlaySingleplayer") {
	group = project.archive_name
	description = "Uses Quick Play to join singleplayer world `New World` on launch."
	dependsOn(tasks.runClient.args(["--quickPlaySingleplayer", "New World"]))
}
tasks.register("quickPlayMultiplayer") {
	group = project.archive_name
	description = "Uses Quick Play to join multiplayer server `localhost:25565` on launch."
	dependsOn(tasks.runClient.args(["--quickPlayMultiplayer", "localhost:25565"]))
}
tasks.register("runClientLoggedIn") {
	group = project.archive_name
	description = "Uses DevLogin to login to your Minecraft Account"
	dependsOn(tasks.runClient.args(["--msa"]))
}
tasks.register("quickPlaySingleplayerLoggedIn") {
	group = project.archive_name
	description = "Uses Quick Play to join singleplayer world `New World` on launch and uses DevLogin to login to your Minecraft Account."
	dependsOn(tasks.runClient.args(["--quickPlaySingleplayer", "New World", "--msa"]))
}
tasks.register("quickPlayMultiplayerLoggedIn") {
	group = project.archive_name
	description = "Uses Quick Play to join multiplayer server `localhost:25565` on launch and uses DevLogin to login to your Minecraft Account."
	dependsOn(tasks.runClient.args(["--quickPlayMultiplayer", "localhost:25565", "--msa"]))
}